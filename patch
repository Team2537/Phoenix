diff --git a/Phoenix/src/org/usfirst/frc/team2537/robot/Ports.java b/Phoenix/src/org/usfirst/frc/team2537/robot/Ports.java
index 8dfb06e..6cf2970 100644
--- a/Phoenix/src/org/usfirst/frc/team2537/robot/Ports.java
+++ b/Phoenix/src/org/usfirst/frc/team2537/robot/Ports.java
@@ -56,9 +56,6 @@
 	// Limit Switch
 	public static final int VERT_LIMIT_SWITCH = 2;
 	
-	//Beam Break Sensors
-	public static final int VERT_BEAM_BREAK_RECEIVER = 2;
-
 	// Raspberry Pi
 	public static final edu.wpi.first.wpilibj.SerialPort.Port RASPI = Port.kMXP;
 	
diff --git a/Phoenix/src/org/usfirst/frc/team2537/robot/Robot.java b/Phoenix/src/org/usfirst/frc/team2537/robot/Robot.java
index d7c206c..281cf46 100644
--- a/Phoenix/src/org/usfirst/frc/team2537/robot/Robot.java
+++ b/Phoenix/src/org/usfirst/frc/team2537/robot/Robot.java
@@ -3,12 +3,14 @@
 import org.usfirst.frc.team2537.robot.auto.AutoChooser;
 import org.usfirst.frc.team2537.robot.auto.Navx;
 import org.usfirst.frc.team2537.robot.auto.vision.VisionInput;
+import org.usfirst.frc.team2537.robot.auto.vision.VisionRotateCommand;
 import org.usfirst.frc.team2537.robot.cameras.Cameras;
 import org.usfirst.frc.team2537.robot.climb.ClimbSubsystem;
 import org.usfirst.frc.team2537.robot.cuber.CuberSubsystem;
 import org.usfirst.frc.team2537.robot.drive.DriveSubsystem;
 import org.usfirst.frc.team2537.robot.ramp.RampSubsystem;
 import org.usfirst.frc.team2537.robot.vert.VertSubsystem;
+
 import edu.wpi.first.wpilibj.DriverStation;
 import edu.wpi.first.wpilibj.IterativeRobot;
 import edu.wpi.first.wpilibj.PowerDistributionPanel;
@@ -57,15 +59,15 @@ public void robotInit() {
 		cuberSys = new CuberSubsystem();
 		cuberSys.registerButtons();
 
-		//  visionSerial = new VisionInput();
+		visionSerial = new VisionInput();
 
 		cameras = new Cameras();
 		cameras.start();
 
 		pdp = new PowerDistributionPanel();
 
-		autoChooser = new AutoChooser();
-		SmartDashboard.putData("Auto Choices", autoChooser);
+//		autoChooser = new AutoChooser();
+//		SmartDashboard.putData("Auto Choices", autoChooser);
 
 	}
 
@@ -81,7 +83,8 @@ public void autonomousInit() {
 		if (fmsData.length()==0)
 			fmsData="OOO"; //if we can't get FMS data within 2 seconds, make dummy data
 
-		Scheduler.getInstance().add(autoChooser.getSelected());
+//		Scheduler.getInstance().add(autoChooser.getSelected());
+		Scheduler.getInstance().add(new VisionRotateCommand());
 	}
 
 	@Override
@@ -91,7 +94,7 @@ public void autonomousPeriodic() {
 
 	@Override
 	public void teleopInit() {
-		Robot.vertSys.resetEncoder();
+//		Robot.vertSys.resetEncoder();
 		Scheduler.getInstance().removeAll();
 		Navx.getInstance().reset();
 		Robot.driveSys.resetEncoders();
@@ -108,7 +111,7 @@ public void teleopPeriodic() {
 		if(Robot.rampSys.isOpen) {
 			SmartDashboard.putString("Ramp is Open", "THE RAMP IS OPEN YOU SURE YOU WANT THIS");
 		}
-		System.out.println(Robot.vertSys.getBeamBreak());
+//		System.out.println(Robot.vertSys.getBeamBreak());
 	}
 
 	@Override
diff --git a/Phoenix/src/org/usfirst/frc/team2537/robot/auto/RouteHandler.java b/Phoenix/src/org/usfirst/frc/team2537/robot/auto/RouteHandler.java
new file mode 100644
index 0000000..3eeea6e
--- /dev/null
+++ b/Phoenix/src/org/usfirst/frc/team2537/robot/auto/RouteHandler.java
@@ -0,0 +1,68 @@
+package org.usfirst.frc.team2537.robot.auto;
+
+import org.usfirst.frc.team2537.robot.Robot;
+
+import edu.wpi.first.wpilibj.command.CommandGroup;
+import org.usfirst.frc.team2537.robot.auto.routes.twocube.SameScaleSameSwitchRoute;
+
+public class RouteHandler extends CommandGroup {
+	public RouteHandler(AutoChooserOption autoChooserOption) {
+		String fmsCroppedConfiguration = Robot.fmsData.substring(0, 2);
+		if(autoChooserOption == AutoChooserOption.SOLO_LEFT) {
+			switch(fmsCroppedConfiguration) {
+			case "LL":
+				addSequential(new SameScaleSameSwitchRoute(true));
+				break;
+			case "LR":
+				//addSequential(new SameSwitchOppositeScale(true));
+				break;
+			case "RL":
+				break;
+			case "RR":
+				break;
+			}
+		} else if(autoChooserOption == AutoChooserOption.SOLO_RIGHT) {
+			switch(fmsCroppedConfiguration) {
+			case "LL":
+				break;
+			case "LR":
+				break;
+			case "RL":
+				break;
+			case "RR":
+				break;
+			}
+		} else if(autoChooserOption == AutoChooserOption.CO_OP_LEFT) {
+			switch(fmsCroppedConfiguration) {
+			case "LL":
+				break;
+			case "LR":
+				break;
+			case "RL":
+				break;
+			case "RR":
+				break;
+			}
+		} else if(autoChooserOption == AutoChooserOption.CO_OP_RIGHT){
+			switch(fmsCroppedConfiguration) {
+			case "LL":
+				break;
+			case "LR":
+				break;
+			case "RL":
+				break;
+			case "RR":
+				break;
+			}
+		} else {
+			System.err.println("ERROR: invalid AutoChooserOption");
+		}
+	}
+	
+	public enum AutoChooserOption{
+		SOLO_LEFT,
+		SOLO_RIGHT,
+		CO_OP_LEFT,
+		CO_OP_RIGHT
+	}
+}
diff --git a/Phoenix/src/org/usfirst/frc/team2537/robot/auto/vision/VisionRotateCommand.java b/Phoenix/src/org/usfirst/frc/team2537/robot/auto/vision/VisionRotateCommand.java
index 3aec829..dd55a74 100644
--- a/Phoenix/src/org/usfirst/frc/team2537/robot/auto/vision/VisionRotateCommand.java
+++ b/Phoenix/src/org/usfirst/frc/team2537/robot/auto/vision/VisionRotateCommand.java
@@ -61,12 +61,13 @@ protected void execute() {
 			power = Math.min(Math.abs(power), Math.abs(centerX*power*CENTER_kP)) * Math.signum(centerX);
 		}
 		
-		Robot.driveSys.setMotors( power,  Motor.LEFT);
-		Robot.driveSys.setMotors(-power, Motor.RIGHT);
+//		Robot.driveSys.setMotors( power,  Motor.LEFT);
+//		Robot.driveSys.setMotors(-power, Motor.RIGHT);
 	}
 
 	@Override
 	protected boolean isFinished() {
+		System.out.println("centerX: " + centerX);
 		return stopAtTarget && Math.abs(centerX) < TURNING_TOLERANCE;
 	}
 
diff --git a/Phoenix/src/org/usfirst/frc/team2537/robot/vert/VertSubsystem.java b/Phoenix/src/org/usfirst/frc/team2537/robot/vert/VertSubsystem.java
index daf861d..fdda957 100644
--- a/Phoenix/src/org/usfirst/frc/team2537/robot/vert/VertSubsystem.java
+++ b/Phoenix/src/org/usfirst/frc/team2537/robot/vert/VertSubsystem.java
@@ -16,7 +16,6 @@
 	private CANTalon vertMotorTwo;
 	private DigitalInput limitSwitch;
 	double current;
-	private DigitalInput vertBeamBreak;
 
 	public VertSubsystem() { 
 		vertMotorOne = new CANTalon(Ports.VERT_MOTOR_ONE);
@@ -28,7 +27,6 @@ public VertSubsystem() {
 		vertMotorTwo.follow(vertMotorOne);
 		
 		limitSwitch = new DigitalInput(Ports.VERT_LIMIT_SWITCH);
-		vertBeamBreak = new DigitalInput(Ports.VERT_BEAM_BREAK_RECEIVER);
 	}
 
 	public void initDefaultCommand() {
@@ -60,8 +58,4 @@ public boolean getLimitSwitch() {
 		return limitSwitch.get();
 	}
 	
-	public boolean getBeamBreak() {
-		return vertBeamBreak.get();
-	}
-
 }
